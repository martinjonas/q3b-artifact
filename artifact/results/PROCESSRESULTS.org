#+TITLE: Q3B: An Efficient BDD-based SMT Solver for Quantified Bit-Vectors
#+SUBTITLE: Experimental evaluation
#+AUTHOR: Martin Jonáš
#+OPTIONS: ^:nil
#+PROPERTY: header-args :tangle yes

# -*- mode: org; -*-

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="styles/bigblow/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="styles/bigblow/css/bigblow.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="styles/bigblow/css/hideshow.css"/>

#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/jquery-1.11.0.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/jquery-ui-1.10.2.min.js"></script>

#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/jquery.localscroll-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/jquery.scrollTo-1.4.3.1-min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/jquery.zclip.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/bigblow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="styles/bigblow/js/hideshow.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="styles/lib/js/jquery.stickytableheaders.min.js"></script>

* CSV files
  All statistics are computed from the BenchExec CSV file [[file:data.csv]].
*** Convert to a correct CSV
    First, we need to replace tabs by commas:
    #+BEGIN_SRC sh
    sed -i 's/\t/,/g' data.table.csv
    #+END_SRC

    #+RESULTS:

    And then we remove the standard BenchExec header rows and replace
    them by more readable ones.
    #+BEGIN_SRC sh
    cat results_header.csv > data.csv
    tail -n +4 data.table.csv >> data.csv
    #+END_SRC

    #+RESULTS:

*** Split into benchmark sets
    We split benchmark name into family and name.

    #+BEGIN_SRC sh
    sed -i 's#/#,##' data.csv
    #separator is #, so we do not have to escape all backslashes
    #+END_SRC

    #+RESULTS:

*** Create directories for figures and tables
    We also create directories in which we later generate figures and tables.

    #+BEGIN_SRC sh
    mkdir figures
    mkdir tables
    #+END_SRC

    #+RESULTS:


* R environment
*** Load necessary libraries
    #+BEGIN_SRC R :results none :session :exports code
    library(dplyr)
    library(ggplot2)
    library(scales)
    library(colorspace)
    library(RColorBrewer)
    library(xtable)
    options("scipen"=100, "digits"=0)
    #+END_SRC

*** Load all CSV files
    #+BEGIN_SRC R :results none :session :exports code
    res = list()
    res <- read.csv("data.csv", header=TRUE, stringsAsFactors=FALSE)
    configurations = c('boolector', 'cvc4', 'q3b', 'z3')
    labels = c(boolector = 'Boolector', cvc4 = 'CVC4', q3b = 'Q3B', z3 = 'Z3')
    #+END_SRC

    #+RESULTS:

    We need to modify all times for results other than *sat* or
    *unsat* to have the maximal values of walltime and CPU-time.

    #+BEGIN_SRC R :results output :session :exports code
    timeout <- 1200

    res[['trivial']] <- TRUE

    for (c in configurations)
    {
      res[[paste(c, 'solved', sep='.')]] <- res[[paste(c, 'result', sep='.')]] == "sat" | res[[paste(c, 'result', sep='.')]] == "unsat"
      #res[[paste(c, 'cputime', sep='.')]][!res[[paste(c, 'solved', sep='.')]]] <- timeout
      #res[[paste(c, 'walltime', sep='.')]][!res[[paste(c, 'solved', sep='.')]]] <- timeout
      res[['trivial']] <- res[['trivial']] & res[[paste(c, 'cputime', sep='.')]] < 0.1
    }
    #+END_SRC

    #+RESULTS:

*** Check correctness of results

    We need to check that no two solvers disagreed on the status of a
    benchmark (i.e. sat vs unsat). *The result of the following command
    should be empty!*

    #+BEGIN_SRC R :results value :session :exports both :colnames yes
      res %>%
          mutate(sat = ((boolector.result == "sat") | (cvc4.result == "sat") | (z3.result == "sat") |  (q3b.result == "sat")),
                 unsat = ((boolector.result == "unsat") | (cvc4.result == "unsat") | (z3.result == "unsat") |  (q3b.result == "unsat"))) %>%
          filter(sat & unsat) %>%
          select(benchmark, boolector.result, cvc4.result, z3.result, q3b.result)
    #+END_SRC

    #+RESULTS:
    | benchmark | boolector.result | cvc4.result | z3.result | q3b.result |
    |-----------+------------------+-------------+-----------+------------|

* Statistics
*** Numbers of solved formulas
***** Helper function to generate tables
      #+BEGIN_SRC R :results output :session :exports code
        getTable <- function()
        {
          counts <- list()

      	  for (c in configurations)
      	  {
            counts[[c]] <- count_(res, paste(c, 'result', sep='.'))
            colnames(counts[[c]]) <- c('result', c)
          }

      	  return(Reduce(function(...) merge(..., all=TRUE), counts))
        }
      #+END_SRC

      #+RESULTS:
***** Total
      #+BEGIN_SRC R :results value :colnames yes :session :exports both
      	getTable()
      #+END_SRC

      #+RESULTS:
      | result            | boolector | cvc4 |  q3b |   z3 |
      |-------------------+-----------+------+------+------|
      | OUT OF MEMORY     |       nil |  nil |   11 |   14 |
      | sat               |       611 |  556 |  621 |  563 |
      | TIMEOUT (timeout) |       257 |  224 |  130 |  266 |
      | unsat             |      4883 | 4971 | 4989 | 4908 |


*** Solved formulas in benchmark families
    #+BEGIN_SRC R :results value :colnames yes :session :exports both
    table <- res %>%
        group_by(family) %>%
        summarise(total = sum(n()),
                  boolector = sum(boolector.solved),
                  cvc4 = sum(cvc4.solved),
                  q3b = sum(q3b.solved),
                  z3 = sum(z3.solved),
                  maxSolved = max(boolector, cvc4, q3b, z3))

    table <- rbind(table, data.frame(family='Total',
       total = sum(table$total),
       boolector = sum(table$boolector),
       cvc4 = sum(table$cvc4),
       q3b = sum(table$q3b),
       z3 = sum(table$z3),
       maxSolved = max(sum(table$boolector), sum(table$cvc4), sum(table$q3b), sum(table$z3))))

    table %>% select(family, total, boolector, cvc4, q3b, z3)
    #+END_SRC

    #+RESULTS:
    | family                              | total | boolector | cvc4 |  q3b |   z3 |
    |-------------------------------------+-------+-----------+------+------+------|
    | 2017-Preiner-keymaera               |  4035 |      4022 | 3998 | 4009 | 4031 |
    | 2017-Preiner-psyco                  |   194 |       193 |  190 |  182 |  194 |
    | 2017-Preiner-scholl-smt08           |   374 |       312 |  248 |  319 |  272 |
    | 2017-Preiner-tptp                   |    73 |        69 |   73 |   73 |   73 |
    | 2017-Preiner-UltimateAutomizer      |   153 |       152 |  151 |  153 |  153 |
    | 20170501-Heizmann-UltimateAutomizer |   131 |        30 |  128 |  124 |   32 |
    | 2018-Preiner-cav18                  |   600 |       553 |  565 |  565 |  553 |
    | wintersteiger                       |   191 |       163 |  174 |  185 |  163 |
    | Total                               |  5751 |      5494 | 5527 | 5610 | 5471 |

    #+BEGIN_SRC R :results none :colnames yes :session :exports both
    maxTable <- transmute(table,
      Family = family,
      Total = total,
      Boolector = ifelse(boolector == maxSolved, sprintf("\\textbf{%d}", boolector), boolector),
      CVC4 = ifelse(cvc4 == maxSolved, sprintf("\\textbf{%d}", cvc4), cvc4),
      Q3B = ifelse(q3b == maxSolved, sprintf("\\textbf{%d}", q3b), q3b),
      Z3 = ifelse(z3 == maxSolved, sprintf("\\textbf{%d}", z3), z3)
)

    xt <- xtable(maxTable, type = "latex", label="tbl:solved",
      caption = "For each solver and benchmark family, the table shows the number of benchmarks from the given family solved by the given solver. The column \\emph{Total} shows the total number of benchmarks in the given family.")
    align(xt) <- c('l', 'l', 'r', 'r', 'r', 'r', 'r')
    print(xt,
          file = "tables/solved.tex", include.rownames=FALSE, booktabs=TRUE, hline.after = c(-1, 0, nrow(table)-1, nrow(table)), table.placement="tbp",
          sanitize.text.function=function(x) x)
    #+END_SRC


***** Only sat
    #+BEGIN_SRC R :results value :colnames yes :session :exports both
    satTable <- res %>%
        filter(z3.result == 'sat' | boolector.result == 'sat' | cvc4.result == 'sat' | q3b.result == 'sat') %>%
        group_by(family) %>%
        summarise(total = sum(n()),
                  boolector = sum(boolector.solved),
                  cvc4 = sum(cvc4.solved),
                  q3b = sum(q3b.solved),
                  z3 = sum(z3.solved),
                  maxSolved = max(boolector, cvc4, q3b, z3))

    satTable <- rbind(satTable, data.frame(family='Total',
       total = sum(satTable$total),
       boolector = sum(satTable$boolector),
       cvc4 = sum(satTable$cvc4),
       q3b = sum(satTable$q3b),
       z3 = sum(satTable$z3),
       maxSolved = max(sum(satTable$boolector), sum(satTable$cvc4), sum(satTable$q3b), sum(satTable$z3))))

    satTable %>% select(family, total, boolector, cvc4, q3b, z3)
    #+END_SRC

    #+RESULTS:
    | family                              | total | boolector | cvc4 | q3b |  z3 |
    |-------------------------------------+-------+-----------+------+-----+-----|
    | 2017-Preiner-keymaera               |   108 |       105 |   78 | 104 | 108 |
    | 2017-Preiner-psyco                  |   132 |       131 |  129 | 123 | 132 |
    | 2017-Preiner-scholl-smt08           |   257 |       247 |  214 | 249 | 204 |
    | 2017-Preiner-tptp                   |    17 |        16 |   17 |  17 |  17 |
    | 2017-Preiner-UltimateAutomizer      |    16 |        16 |   14 |  16 |  16 |
    | 20170501-Heizmann-UltimateAutomizer |    21 |        19 |   19 |  20 |  15 |
    | wintersteiger                       |    93 |        77 |   85 |  92 |  71 |
    | Total                               |   644 |       611 |  556 | 621 | 563 |

    #+BEGIN_SRC R :results none :colnames yes :session :exports both
    maxSatTable <- transmute(satTable,
      Family = family,
      Total = total,
      Boolector = ifelse(boolector == maxSolved, sprintf("\\textbf{%d}", boolector), boolector),
      CVC4 = ifelse(cvc4 == maxSolved, sprintf("\\textbf{%d}", cvc4), cvc4),
      Q3B = ifelse(q3b == maxSolved, sprintf("\\textbf{%d}", q3b), q3b),
      Z3 = ifelse(z3 == maxSolved, sprintf("\\textbf{%d}", z3), z3)
)

    xt <- xtable(maxSatTable, type = "latex", label="tbl:satSolved",
      caption = "For each solver and benchmark family, the table shows the number of \\emph{satisfiable} benchmarks solved from this benchmark family by the solver.")
    align(xt) <- c('l', 'l', 'r', 'r', 'r', 'r', 'r')
    print(xt,
          file = "tables/satSolved.tex", include.rownames=FALSE, booktabs=TRUE, hline.after = c(-1, 0, nrow(satTable)-1, nrow(satTable)),table.placement="tbp",
          sanitize.text.function=function(x) x)
    #+END_SRC

***** Only unsat
    #+BEGIN_SRC R :results value :colnames yes :session :exports both
    unsatTable <- res %>%
        filter(z3.result == 'unsat' | boolector.result == 'unsat' | cvc4.result == 'unsat' | q3b.result == 'unsat') %>%
        group_by(family) %>%
        summarise(total = sum(n()),
                  boolector = sum(boolector.solved),
                  cvc4 = sum(cvc4.solved),
                  q3b = sum(q3b.solved),
                  z3 = sum(z3.solved),
                  maxSolved = max(boolector, cvc4, q3b, z3))

    unsatTable <- rbind(unsatTable, data.frame(family='Total',
       total = sum(unsatTable$total),
       boolector = sum(unsatTable$boolector),
       cvc4 = sum(unsatTable$cvc4),
       q3b = sum(unsatTable$q3b),
       z3 = sum(unsatTable$z3),
       maxSolved = max(sum(unsatTable$boolector), sum(unsatTable$cvc4), sum(unsatTable$q3b), sum(unsatTable$z3))))

    unsatTable %>% select(family, total, boolector, cvc4, q3b, z3)
    #+END_SRC

    #+RESULTS:
    | family                              | total | boolector | cvc4 |  q3b |   z3 |
    |-------------------------------------+-------+-----------+------+------+------|
    | 2017-Preiner-keymaera               |  3925 |      3917 | 3920 | 3905 | 3923 |
    | 2017-Preiner-psyco                  |    62 |        62 |   61 |   59 |   62 |
    | 2017-Preiner-scholl-smt08           |    76 |        65 |   34 |   70 |   68 |
    | 2017-Preiner-tptp                   |    56 |        53 |   56 |   56 |   56 |
    | 2017-Preiner-UltimateAutomizer      |   137 |       136 |  137 |  137 |  137 |
    | 20170501-Heizmann-UltimateAutomizer |   110 |        11 |  109 |  104 |   17 |
    | 2018-Preiner-cav18                  |   590 |       553 |  565 |  565 |  553 |
    | wintersteiger                       |    94 |        86 |   89 |   93 |   92 |
    | Total                               |  5050 |      4883 | 4971 | 4989 | 4908 |

    #+BEGIN_SRC R :results none :colnames yes :session :exports both
    maxUnsatTable <- transmute(unsatTable,
      Family = family,
      Total = total,
      Boolector = ifelse(boolector == maxSolved, sprintf("\\textbf{%d}", boolector), boolector),
      CVC4 = ifelse(cvc4 == maxSolved, sprintf("\\textbf{%d}", cvc4), cvc4),
      Q3B = ifelse(q3b == maxSolved, sprintf("\\textbf{%d}", q3b), q3b),
      Z3 = ifelse(z3 == maxSolved, sprintf("\\textbf{%d}", z3), z3)
)

    xt <- xtable(maxUnsatTable, type = "latex", label="tbl:unsatSolved",
      caption = "For each solver and benchmark family, the table shows the number of \\emph{unsatisfiable} benchmarks solved from this benchmark family by the solver.")
    align(xt) <- c('l', 'l', 'r', 'r', 'r', 'r', 'r')
    print(xt,
          file = "tables/unsatSolved.tex", include.rownames=FALSE, booktabs=TRUE, hline.after = c(-1, 0, nrow(unsatTable)-1, nrow(unsatTable)), table.placement="tbp",
          sanitize.text.function=function(x) x)
    #+END_SRC


*** Uniquely solved benchmarks

***** Only by Z3
      #+BEGIN_SRC R :results value :colnames yes :session :exports both
      z3Unique <- res %>%
          filter(z3.solved & !boolector.solved & !cvc4.solved & !q3b.solved) %>%
          select(family, benchmark) %>%
          group_by(family) %>%
          summarise(count = n()) %>%
          rename(Z3 = count)
      #+END_SRC

      #+RESULTS:
      | family                    | Z3 |
      |---------------------------+----|
      | 2017-Preiner-keymaera     |  3 |
      | 2017-Preiner-psyco        |  1 |
      | 2017-Preiner-scholl-smt08 |  1 |
      | wintersteiger             |  1 |

***** Only by Boolector
      #+BEGIN_SRC R :results value :colnames yes :session :exports both
      	boolectorUnique <- res %>%
          filter(!z3.solved & boolector.solved & !cvc4.solved & !q3b.solved) %>%
          select(family, benchmark) %>%
          group_by(family) %>%
          summarise(count = n()) %>%
          rename(Boolector = count)
      #+END_SRC

      #+RESULTS:
      | family                    | Boolector |
      |---------------------------+-----------|
      | 2017-Preiner-keymaera     |         1 |
      | 2017-Preiner-scholl-smt08 |         7 |

***** Only by CVC4
      #+BEGIN_SRC R :results value :colnames yes :session :exports both
      	cvc4Unique <- res %>%
          filter(!z3.solved & !boolector.solved & cvc4.solved & !q3b.solved) %>%
          select(family, benchmark) %>%
          group_by(family) %>%
          summarise(count = n()) %>%
          rename(CVC4 = count)
      #+END_SRC

      #+RESULTS:
      | family                              | CVC4 |
      |-------------------------------------+------|
      | 2017-Preiner-scholl-smt08           |    2 |
      | 20170501-Heizmann-UltimateAutomizer |    3 |
      | wintersteiger                       |    1 |

***** Only by Q3B
      #+BEGIN_SRC R :results value :colnames yes :session :exports both
      	q3bUnique <- res %>%
          filter(!z3.solved & !boolector.solved & !cvc4.solved & q3b.solved) %>%
          select(family, benchmark) %>%
          group_by(family) %>%
          summarise(count = n()) %>%
          rename(Q3B = count)
      #+END_SRC

      #+RESULTS:
      | family                              | Q3B |
      |-------------------------------------+-----|
      | 2017-Preiner-keymaera               |   1 |
      | 2017-Preiner-scholl-smt08           |   8 |
      | 20170501-Heizmann-UltimateAutomizer |   1 |
      | 2018-Preiner-cav18                  |  11 |
      | wintersteiger                       |   4 |

***** Merged table
      #+BEGIN_SRC R :results value :colnames yes :session :exports both
      uniqSolved <- Reduce(function(...) merge(..., all=TRUE), list(boolectorUnique, cvc4Unique, q3bUnique, z3Unique))
      uniqSolved[is.na(uniqSolved)] <- 0
      uniqSolved
      #+END_SRC

      #+RESULTS:
      | family                              | Boolector | CVC4 | Q3B | Z3 |
      |-------------------------------------+-----------+------+-----+----|
      | 2017-Preiner-keymaera               |         1 |    0 |   1 |  3 |
      | 2017-Preiner-psyco                  |         0 |    0 |   0 |  1 |
      | 2017-Preiner-scholl-smt08           |         7 |    2 |   8 |  1 |
      | 20170501-Heizmann-UltimateAutomizer |         0 |    3 |   1 |  0 |
      | 2018-Preiner-cav18                  |         0 |    0 |  11 |  0 |
      | wintersteiger                       |         0 |    1 |   4 |  1 |

      #+BEGIN_SRC R :results none :colnames yes :session :exports both
      xt <- xtable(uniqSolved, type = "latex", label="tbl:uniquelySolved",
        caption = "For each solver and benchmark family, the table shows the number of benchmarks solved only by the given solver.")
      align(xt) <- c('l', 'l', 'r', 'r', 'r', 'r')
      print(xt,
          file = "tables/uniqueSolved.tex", include.rownames=FALSE, booktabs=TRUE, table.placement="tbp",
          sanitize.text.function=function(x) x,
          NA.string="0")
      #+END_SRC

      #+BEGIN_SRC R :results value :colnames yes :rownames yes :session :exports both
      uniqSolvedSum <- uniqSolved %>%
                       summarize(Boolector = as.integer(sum(Boolector)),
                               CVC4 = as.integer(sum(CVC4)),
                               Q3B = as.integer(sum(Q3B)),
                               Z3 = as.integer(sum(Z3)))

      uniqSolvedSum <- as.data.frame(t(uniqSolvedSum))
      colnames(uniqSolvedSum) <- c("Uniquely solved")
      uniqSolvedSum
      #+END_SRC

      #+RESULTS:
      |           | Uniquely solved |
      |-----------+-----------------|
      | Boolector |               8 |
      | CVC4      |               6 |
      | Q3B       |              25 |
      | Z3        |               6 |


***** By none of the solvers
      #+BEGIN_SRC R :results value :colnames yes :session :exports both
      	res %>%
          filter(!z3.solved & !boolector.solved & !cvc4.solved & !q3b.solved) %>%
          select(family, benchmark) %>%
          group_by(family) %>%
          summarise(count = n())
      #+END_SRC

      #+RESULTS:
      | family                    | count |
      |---------------------------+-------|
      | 2017-Preiner-keymaera     |     2 |
      | 2017-Preiner-scholl-smt08 |    41 |
      | 2018-Preiner-cav18        |    10 |
      | wintersteiger             |     4 |

*** Cross comparison

***** Helper function to generate tables
      :PROPERTIES:
      :VISIBILITY: overview
      :END:

      First we need a function which for given configurations computes a
      number of benchmarks that the first configuration has solved, but
      the second one has not.

      #+BEGIN_SRC R :results output :session :exports code
        firstIsBetter <- function(c1, c2)
        {
          c1Solved <- res[[paste(c1, 'solved', sep='.')]]
          c2Solved <- res[[paste(c2, 'solved', sep='.')]]

          onlyC1Solved <- c1Solved & !(c2Solved)
          return(onlyC1Solved)
        }

        formulasFirstIsBetter <- function(c1, c2)
        {
          return(res[firstIsBetter(c1, c2)])
        }

        compareConfigurations <- function(c1, c2)
        {
          return(sum(firstIsBetter(c1, c2)))
        }
      #+END_SRC

      #+RESULTS:

      We can use this function to generate the cross table.
      #+BEGIN_SRC R :results output :session :exports code
        crossTable <- function()
        {
          results <- c()
          for (c1 in configurations)
          {
            for (c2 in configurations)
            {
              results <- c(results, compareConfigurations(c1, c2))
            }
          }

          results.table <- matrix(results, ncol=4,byrow=TRUE)
          colnames(results.table) <- labels
          rownames(results.table) <- labels
          out <- as.data.frame(results.table)
          return(out)
        }
      #+END_SRC

      #+RESULTS:

***** Results
      #+BEGIN_SRC R :results value :colnames yes :session :exports both
      	table <- crossTable()
        table <- merge(table, uniqSolvedSum, by='row.names')
        colnames(table) <- c("", "Boolector", "CVC4", "Q3B", "Z3", "Uniquely solved")
        table
      #+END_SRC

      #+RESULTS:
      |           | Boolector | CVC4 | Q3B |  Z3 | Uniquely solved |
      |-----------+-----------+------+-----+-----+-----------------|
      | Boolector |         0 |  123 |  69 |  78 |               8 |
      | CVC4      |       156 |    0 |  60 | 171 |               6 |
      | Q3B       |       185 |  143 |   0 | 208 |              25 |
      | Z3        |        55 |  115 |  69 |   0 |               6 |

    #+BEGIN_SRC R :results none :colnames yes :session :exports both
      xt <- xtable(table, type = "latex", label="tbl:cross",
                   caption = "The table shows cross-comparison of solved benchmarks by all pairs of the solvers. Each cell shows the number of benchmarks that were solved by the solver in the corresponding row, but not by the solver by the corresponding column. The column \\emph{Uniquely solved} shows the number of benchmarks that were solved only by the given solver.")
      align(xt) <- "llrrrr|r"
      print(xt,
            file = "tables/cross.tex", include.rownames=FALSE, booktabs=TRUE, table.placement="tbp")
    #+END_SRC

* Plots
*** Quantile plots
***** Helper functions
      #+BEGIN_SRC R :session :exports code
        quantilePlot <- function(onlyTrivial = FALSE)
        {
            num <- length(configurations)

            data <- res

            if (onlyTrivial)
            {
                data <- filter(data, trivial == FALSE)
            }

            ordered = list()
            for (c in configurations)
            {
                ordered[[c]] = sort(data[[paste(c, 'cputime', sep='.')]][data[[paste(c, 'solved', sep='.')]]])
            }

            plot(c(0, nrow(data)), c(0.001, timeout), log='y', xlab=if (onlyTrivial) 'Solved non-trivial formulas' else "Solved formulas", ylab='CPU time (s)', frame.plot=TRUE, type='n', yaxt="n")
            axis(2, at = c(0.001, 0.01, 0.1, 1, 10, 100, 1000),
                 labels = c(expression(paste("10"^"-3")),
                            expression(paste("10"^"-2")),
                            expression(paste("10"^"-1")),
                            "1",
                            "10",
                            expression(paste("10"^"2")),
                            expression(paste("10"^"3"))))

            colors <- c("blue", "darkgreen", "red", "black", "purple")
            ltys <- c(5,6,4,1,2)
            for (i in seq_along(configurations))
            {
                c <- configurations[i]
                lines(1:length(ordered[[c]]), ordered[[c]], type='s', col=colors[i], lty=ltys[i])
            }

            legend("topleft",
                   lty=ltys,
                   lwd=rep(2, each=num),
                   col=colors,
                   legend=labels)
        }
      #+END_SRC

      #+RESULTS:

      #+BEGIN_SRC R :results output graphics :file figures/all_quantile.svg :session :exports both :width 8 :height 5
        quantilePlot()
      #+END_SRC

      #+RESULTS:
      [[file:figures/all_quantile.svg]]

    #+BEGIN_SRC R :results none :session :noweb yes
    pdf(file="figures/all_quantile.pdf",width=8,height=4); tryCatch({
    quantilePlot(FALSE)
    },error=function(e){plot(x=-1:1, y=-1:1, type='n', xlab='', ylab='', axes=FALSE); text(x=0, y=0, labels=e$message, col='red'); paste('ERROR', e$message, sep=' : ')}); dev.off()
    #+END_SRC

*** Quantile plots of non-trivial benchmarks
    This plot shows only result that are not trivial (i.e. some solver
    took more than 0.1 second to solve it)

    This is the number of trivial benchmarks
    #+BEGIN_SRC R :results output value :session :exports both
      nrow(filter(res, trivial))
    #+END_SRC

    #+RESULTS:
    : 3468

    #+BEGIN_SRC R :results output graphics :file figures/all_trivial_quantile.svg :session :exports both :width 8 :height 4
    quantilePlot(TRUE)
    #+END_SRC

    #+RESULTS:
    [[file:figures/all_trivial_quantile.svg]]

    #+BEGIN_SRC R :results none :session :noweb yes
    pdf(file="figures/all_trivial_quantile.pdf",width=8,height=4); tryCatch({
    quantilePlot(TRUE)
    },error=function(e){plot(x=-1:1, y=-1:1, type='n', xlab='', ylab='', axes=FALSE); text(x=0, y=0, labels=e$message, col='red'); paste('ERROR', e$message, sep=' : ')}); dev.off()
    #+END_SRC

*** Unsolved benchmarks

    #+BEGIN_SRC R :results output :session :exports code
      plotUnsolved <- function(cs)
      {
          cs <- rev(cs)
          unsolved = data.frame(family=character(),
                                configuration=character(),
                                stringsAsFactors=TRUE)
          for (c in cs)
          {
              cUnsolved <- res[["family"]][!res[[paste(c, 'solved', sep='.')]]]
              cUnsolved <- data.frame(
                  family = cUnsolved,
                  configuration = labels[c])
              unsolved <- rbind(unsolved, cUnsolved)
          }

          print(levels(unsolved$family))
          unsolved$family<- factor(unsolved$family, levels=sort(levels(unsolved$family)))
          print(levels(unsolved$family))

          chart.data <- unsolved %>%
                          group_by(family, configuration) %>%
                          summarize(freq = n()) %>%
                          arrange(desc(family)) %>%
                          group_by(configuration) %>%
                          mutate(pos = cumsum(freq) - (0.5 * freq))

          ggplot(data = chart.data, aes(x = configuration, y = freq, fill = family)) +
              geom_bar(stat="identity") +
              coord_flip() +
              geom_text(data=chart.data, aes(x = configuration, y = pos, label = freq), size=3) +
              labs(y = "Number of unsolved benchmarks (less is better)", x = NULL, fill = "Benchmark family") +
              scale_fill_brewer(palette = "Set2")
      }
    #+END_SRC

    #+RESULTS:

    #+BEGIN_SRC R :results output graphics :file unsolved.svg :session :exports both :width 8 :height 3
    plotUnsolved(c('boolector', 'cvc4', 'q3b', 'z3'))
    #+END_SRC

    #+RESULTS:
    [[file:unsolved.svg]]


    #+BEGIN_SRC R :results none :session :noweb yes
    pdf(file="figures/unsolved.pdf",width=8,height=3); tryCatch({
    plotUnsolved(c('boolector', 'cvc4', 'z3', 'q3b'))
    },error=function(e){plot(x=-1:1, y=-1:1, type='n', xlab='', ylab='', axes=FALSE); text(x=0, y=0, labels=e$message, col='red'); paste('ERROR', e$message, sep=' : ')}); dev.off()
    #+END_SRC

*** Box plots
    #+NAME: boxplot
    #+BEGIN_SRC R :session
    allSolved <- res %>% filter(boolector.solved & cvc4.solved & q3b.solved & z3.solved)
    data <- bind_rows(allSolved %>% transmute(solver = "boolector", walltime = boolector.walltime),
                      allSolved %>% transmute(solver = "cvc4", walltime = cvc4.walltime),
                      allSolved %>% transmute(solver = "q3b", walltime = q3b.walltime),
                      allSolved %>% transmute(solver = "z3", walltime = z3.walltime))

    ggplot(data, aes(x = solver, y = walltime, color=solver), log10="y") +
      geom_boxplot() +
      scale_y_log10()
    #+END_SRC

    #+RESULTS: boxplot

    #+BEGIN_SRC R :results output graphics :file figures/boxplot.svg :session :exports both :width 8 :height 5 :noweb yes
    <<boxplot>>
    #+END_SRC

    #+RESULTS:
    [[file:figures/boxplot.svg]]

    #+BEGIN_SRC R :results none :session :noweb yes
    pdf(file="figures/boxplot.pdf",width=8,height=5); tryCatch({
    <<boxplot>>
    },error=function(e){plot(x=-1:1, y=-1:1, type='n', xlab='', ylab='', axes=FALSE); text(x=0, y=0, labels=e$message, col='red'); paste('ERROR', e$message, sep=' : ')}); dev.off()
    #+END_SRC
